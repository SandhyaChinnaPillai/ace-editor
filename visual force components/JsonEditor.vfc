<apex:component controller="JSONController">
<apex:attribute name="typeOfEditor" description="This is the value for the component." type="String" required="true"/>
<style type="text/css" media="screen">
  #aceEditorHeader {
        border: 3px solid lightgray;
        height:20px;
        width: 500px;
          text-align: center;
  }
  #jsonEditor {
    border: 3px solid lightgray;
    width: 500px;
    height: 500px;
  }
  div button {
    float: right;
  }
  .modal {
  display: none;
  position: fixed;
  z-index: 1;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
  width: 100%;
  height: 100%;
  overflow: auto;
  background-color: rgba(0,0,0,0.6);
}
.modal-content {
  margin: 5% auto;
  width: 500px;
  height:520px;
}
#snippetEditorHeader{
    border: 3px solid lightgrey;
    height:20px;
    width: 500px;
    text-align: center;
    background-color:white
}
#snippetEditor{
    border: 3px solid lightgray;
    width: 500px;
    height: 500px;
}
</style>
<div id="aceEditor">
    <div id="aceEditorHeader">
        <span>JSON Editor</span>
        <button type='button' id="editSnippet">Edit Snippets</button>
        <div id="snippetEditorModal" class="modal">
              <div class="modal-content">
                <div id="snippetEditorHeader">
                    <span id="snippetHeading">Snippet Editor</span>
                    <button type='button' id="closeSnippetEditor">Close</button>
                    <button type='button' id="saveSnippets">Save and Close</button>
                </div>
            <div id="snippetEditor"></div>
        </div>
    </div>
    </div>
    <div id="jsonEditor"></div>
</div>
<c:AutoSuggestion ></c:AutoSuggestion>
<apex:includeScript value="{!URLFOR($Resource.SnippetResource)}"/>
<script src="https://ajaxorg.github.io/ace-builds/src-min-noconflict/ace.js"></script>
<script src="https://ajaxorg.github.io/ace-builds/src-min-noconflict/ext-language_tools.js"></script>
<script src="/soap/ajax/15.0/connection.js" type="text/javascript"></script>
<script src="/soap/ajax/15.0/apex.js" type="text/javascript"></script>
<script>
    function strip(str) {
    return str.replace(/^\s+|\s+$/g, '');
      }
    var snippetText="";
    switch("{!typeOfEditor}"){
        case "Integration_Framework":
            snippetText=getSnippetsIntegration();
             break;
        case "Portal":
            snippetText=getSnippetsPortal();
            break;
    }       
    var quoteOver=false;
    var snippetEditorModal = document.getElementById("snippetEditorModal");
    var editSnippet = document.getElementById("editSnippet");
    var closeSnippetEditor = document.getElementById("closeSnippetEditor");
    var saveSnippets = document.getElementById("saveSnippets");
   
    var snippetEditor = ace.edit("snippetEditor");
   
    editSnippet.onclick = function() {
        snippetEditor = ace.edit("snippetEditor");
        snippetEditor.setTheme("ace/theme/monokai");     
        snippetEditor.session.setMode("ace/mode/snippets");
        snippetEditor.setOptions({
        enableLiveAutocompletion: false,
        enableSnippets: true,
        autoScrollEditorIntoView: true,
        });
        snippetEditor.setValue(snippetText);
        snippetEditorModal.style.display = "block";
    }
   
    closeSnippetEditor.onclick = function() {
        snippetEditorModal.style.display = "none";
    }
   
    saveSnippets.onclick = function() {
          snippetText=snippetEditor.getValue();
        var snippetManager = ace.require("ace/snippets").snippetManager;
          var snippets = snippetManager.parseSnippetFile(snippetText,"json");
        snippetManager.register(snippets,"json");
        snippetEditorModal.style.display = "none";
    }
   
    var objectList ='{!listOfObjects}'.substring(1,'{!listOfObjects}'.length-2).split(", ");
    var objectToFileds = new Map();
    var langTools = ace.require("ace/ext/language_tools");
    var jsonEditor = ace.edit("jsonEditor");
      jsonEditor.setTheme("ace/theme/monokai");
      jsonEditor.session.setMode("ace/mode/json");
      jsonEditor.setOptions({
    enableLiveAutocompletion: true,
    enableSnippets: true,
    autoScrollEditorIntoView: true,
      });
   
   
    var myCompleter = {
    identifierRegexps: [/[a-zA-Z0-9]+/],
    getCompletions: function(editor, session, pos, prefix, callback) {
        var editorContent = editor.session.getValue();
        var listOfLines = editorContent.split('\n');
        var currentLine = listOfLines[pos.row];
        currentLine=currentLine.substring(0,pos.column);
        var strippedLine=strip(currentLine);
        if(strippedLine.charAt(strippedLine.length-2)==":" || strippedLine.charAt(strippedLine.length-3)==":" ){
            quoteOver=true;
            
        }
        else{
            quoteOver=false;
            
        }
        switch("{!typeOfEditor}"){
        case "Integration_Framework":
        if(quoteOver&&currentLine.charAt(pos.column-2)=="\""){
            var myList=currentLine.split(',');
            var required=myList[myList.length-1];
            required=required.substring(0,required.lastIndexOf(":"));
            required=required.substring(required.lastIndexOf("{")+1,required.length);
            required=strip(required);
            required=required.substring(1,required.length-1);
            var listOfValues=getRequiredValueIntegration(required);
            callback(null, listOfValues.map(function(word) {
            return {
                caption: word,
                value: word,
                meta: "static"
            };
        }));
        }
        else{
            var required=currentLine.substring(currentLine.lastIndexOf("\"")+1,currentLine.length);
            var requiredList=required.split('\.');
            if(requiredList.length==1){
                callback(null,objectList.filter(entry=>{return entry.startsWith(prefix.toLowerCase());}).map(entry=>{return{value: entry};}));
            }
            else{
                var objectName=requiredList[requiredList.length-2].toLowerCase();
                if(objectList.includes(objectName)){
                    if(!objectToFileds.has(objectName)){
                        sforce.connection.sessionId = '{!$Api.Session_ID}';
                        var fieldList=sforce.apex.execute("JSONController","sample",{objectName:objectName});
                        fieldList=fieldList.join(",");
                        fieldList=fieldList.split(",");
                        objectToFileds.set(objectName,fieldList);
                    }
                    else{
                       fieldList = objectToFileds.get(objectName);
                    }
                    callback(null,fieldList.filter(entry=>{return entry.startsWith(prefix.toLowerCase());}).map(entry=>{return{value: entry};}));
               }
            }
        }
        break;
        case "Portal":
        if(quoteOver){
            var myList=currentLine.split(',');
            var required=myList[myList.length-1];
            required=required.substring(0,required.lastIndexOf(":"));
            required=required.substring(required.lastIndexOf("{")+1,required.length);
            required=strip(required);
            required=required.substring(1,required.length-1);
            var listOfValues=getRequiredValuePortal(required);
            callback(null,listOfValues.map(entry=>{return{value: entry, score:100};}));
        }
                else
                    {
                        
                     var dollist= ["$global.attr(userInfo).attr()",
"$global.attr()",
"$result.attr()",
"$this.attr()",
"$state().attr()",
"$uploadedAttachmentIds",
"$uploadedAttachmentId",
"$disclosure(disclosureName)",
"$nav(actorName).property(fieldName)",
"$nav(actorName).appearance(fieldName)",
"$args[index].attr(fieldName)",
"$remoteArgs()",
"$serverMessage",
"$currentStage.attr(applicationId)"
];
                     callback(null,dollist.filter(entry=>{return entry.startsWith(prefix.toLowerCase());}).map(entry=>{return{value: entry, score:100};}));
                    }
                break;
        }
    }
    }
    langTools.addCompleter(myCompleter);
 </script>
</apex:component>